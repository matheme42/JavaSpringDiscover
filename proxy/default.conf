map $http_upgrade $connection_upgrade {  
    default upgrade;
    ''      close;
}

upstream backend_api{
    server api:9000;
}

upstream backend_auth {
    server api:9000;
}

upstream frontend {
    server webangular:4200;
}

server {
    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;
    server_name localhost;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate /etc/ssl/certs/localhost.crt;
    ssl_certificate_key /etc/ssl/private/localhost.key;

    location /ws {        
        # header additionnel pour la websocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;

        # kill cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;

        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://backend_api$request_uri;   
    }

    location /auth {
        rewrite ^/auth/(.*)$ /$1 break;
        include proxy_params;
        
        # Transmet l'en-tête Authorization
        proxy_set_header Authorization $http_authorization;

        proxy_pass http://backend_auth;
    }

    location /api {
        rewrite ^/api/(.*)$ /$1 break;
        include proxy_params;

        # Transmet l'en-tête Authorization
        proxy_set_header Authorization $http_authorization;

        proxy_pass http://backend_api;
    }

    location / {
        try_files /nonexistent @$http_upgrade;
    }

    location @websocket {
        # header additionnel pour la websocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_pass http://frontend;
    }

    location @ {
        include proxy_params;
        proxy_pass http://frontend;
    }


}

server {
    listen 80 default_server;
    listen [::]:80;


    server_name _;
    return 301 https://$host$request_uri;
}